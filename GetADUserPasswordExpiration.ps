#--------------------------------------------------------------------------------- 
#The sample scripts are not supported under any Microsoft standard support 
#program or service. The sample scripts are provided AS IS without warranty  
#of any kind. Microsoft further disclaims all implied warranties including,  
#without limitation, any implied warranties of merchantability or of fitness for 
#a particular purpose. The entire risk arising out of the use or performance of  
#the sample scripts and documentation remains with you. In no event shall 
#Microsoft, its authors, or anyone else involved in the creation, production, or 
#delivery of the scripts be liable for any damages whatsoever (including, 
#without limitation, damages for loss of business profits, business interruption, 
#loss of business information, or other pecuniary loss) arising out of the use 
#of or inability to use the sample scripts or documentation, even if Microsoft 
#has been advised of the possibility of such damages 
#--------------------------------------------------------------------------------- 

#requires -Version 2.0

#Check if ActiveDirectory module is imported.
If(-not(Get-Module -Name ActiveDirectory))
{
    Import-Module -Name ActiveDirectory
}

Function ADPasswordExpiration([String]$SamAccountName,[Int]$NextDay)
{
    $MaxPasswordAge = (Get-ADDefaultDomainPasswordPolicy).MaxPasswordAge.TotalDays
    $MinPasswordAge = (Get-ADDefaultDomainPasswordPolicy).MinPasswordAge.TotalDays 
    $PasswordBeginDate = (Get-Date).AddDays(-$MaxPasswordAge)
    $PasswordExpriyDate = (Get-date).AddDays(-($MaxPasswordAge-$NextDay))
    $TodayDate = (Get-date)

    Get-ADUser -LDAPFilter "(SamAccountName=$SamAccountName)" -SearchScope Subtree -SearchBase "OU=Users,OU=CAPITA,DC=qsolvlab,DC=local" `
    -Properties PasswordNeverExpires,PasswordLastSet,PasswordExpired,EmailAddress `
    | Select-Object SamAccountName,@{Expression={$($_.PasswordNeverExpires -eq $false) `
     -and $($_.PasswordLastSet -ge $PasswordBeginDate.Date) -and `
     $($_.PasswordLastSet -le $PasswordExpriyDate.Date)};Label="ExpiredOnNext($NextDay)Day"},`
     @{Expression={($_.PasswordLastSet).AddDays($MaxPasswordAge)};Label="ExpiredDate"},`
     @{Expression={$($TodayDate -gt ($_.PasswordLastSet).AddDays($MinPasswordAge))};Label="Password1DayOld"},`
     PasswordLastSet,PasswordExpired,EmailAddress

}
